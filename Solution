#include<iostream>
#include<vector>
#include<algorithm>
#define fr(start,end,i) for(int i=start;i<=end;++i)
#define revfr(start,end,i) for(int i=start;i>=end;--i)
#define ll long long
using namespace std;
void generateSubset(int start,int size, int arr[],vector<int>& v)
{
    int sum=0;
    fr(0,(1<<size)-1,mask)
    {
        //cout<<endl<<mask;
        sum=0;
        fr(0,size-1,item)
        {

            if(mask&(1<<item))
            {
                //cout<<1<<" "; //<<" for mask ans item "<<mask<<" "<<item<<" ";
               // cout<<arr[item+start]<<" ";
                sum+=arr[item+start];
            }
           // else cout<<0<<" ";// for mask ans item "<<mask<<" "<<item<<" ";
        }
        v.push_back(sum);
    }
    //for(auto i :v ) cout<<i<<" ";
    //cout<<endl;
}

main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n,a,b; cin>>n>>a>>b;
    int arr[n];
    fr(0,n-1,i) cin>>arr[i];
    vector<int> left,right;
    generateSubset(0,n/2,arr,left);
    generateSubset(n/2,n&1? n/2+1: n/2,arr,right);
    sort(right.begin(),right.end());
    ll ans=0;
   // cout<<"-------------"<<endl;
    for(int i=0;i<left.size();++i)
    {
        int low= lower_bound(right.begin(),right.end(),a-left[i])-right.begin();
        int high= upper_bound(right.begin(),right.end(),b-left[i])-right.begin();
        //cout<<left[i]<<" ans is "<<high-low<<endl;
        ans+=high-low;
    }
    cout<<ans<<endl;

}
